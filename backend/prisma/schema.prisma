generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  profilePhoto  ProfilePhoto? @relation(name: "ProfilePhotoToUser")
  profilePhotoId String?      @unique
  firstName     String
  lastName      String
  email         String     @unique
  phoneNumber   String     @unique
  password      String
  role          Role       @default(USER)
  emailIV       String
  emailHash     String     @unique
  phoneNumberIV String
  userDomain    String
  businesses    Business[]
}

model Business {
  id                String                @id @default(uuid())
  ownerId           String
  name              String
  verified          Boolean               @default(false)
  address           String
  totalRating       Int                   @default(0)
  website           String?
  about             String
  businessEmail     String                @unique
  businessEmailHash String                @unique
  businessEmailIV   String
  categoryId        String
  phoneNumber       String                @unique
  phoneNumberIV     String
  phoneNumberHash   String                @unique
  dislikes          Int                   @default(0)
  likes             Int                   @default(0)
  category          Category              @relation(fields: [categoryId], references: [id])
  owner             User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  subCategories     BusinessSubCategory[]
  businessHours     BusinessTimings[]
  businessMedia     Media[]               @relation("BusinessMedia")
  reports           Report[]
  reviews           Review[]
  businessType      BusinessType

  @@unique([name, address])
}

model Category {
  id            String        @id  @default(uuid())
  name          String        @unique
  Business      Business[]
  subCategories SubCategory[]
}

model SubCategory {
  id         String                @id @default(uuid())
  name       String
  categoryId String
  businesses BusinessSubCategory[]
  category   Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([name, categoryId], name: "name_categoryId")
}

model BusinessSubCategory {
  businessId    String
  subCategoryId String
  business      Business    @relation(fields: [businessId], references: [id])
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

  @@id([businessId, subCategoryId])
}

model Review {
  id            String   @id @default(uuid())
  businessId    String
  rating        Int
  description   String
  createdAt     DateTime @default(now())
  customerMedia Media[]  @relation("CustomerMedia")
  business      Business @relation(fields: [businessId], references: [id])
}

model Media {
  id              String    @id @default(uuid())
  type            String
  url             String
  customerMediaId String?
  businessMediaId String?
  businessMedia   Business? @relation("BusinessMedia", fields: [businessMediaId], references: [id])
  customerMedia   Review?   @relation("CustomerMedia", fields: [customerMediaId], references: [id])
}
model ProfilePhoto {
  id     String  @id @default(uuid())
  userId String  @unique
  type   String
  url    String
  user   User    @relation(name: "ProfilePhotoToUser", fields: [userId], references: [id], onDelete: Cascade)
}

model BusinessTimings {
  id          String    @id @default(uuid())
  businessId  String
  dayOfWeek   DayOfWeek
  openingTime String
  closingTime String
  specialNote String?
  business    Business  @relation(fields: [businessId], references: [id])
}

model OTP {
  id        String   @id @default(uuid())
  email     String   @unique
  emailHash String   @unique
  emailIV   String
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)

  @@unique([emailHash, otp])
}

model Report {
  id         String   @id @default(uuid())
  businessId String
  userId     String
  reason     String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

enum Role {
  BUSINESS
  USER
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum BusinessType {
  ESTABLISHED_BUSINESS
  STREET_VENDOR
  HOME_BUSINESS
  SERVICES
}